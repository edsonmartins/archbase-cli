/**
 * {{enumName}} - Enum Definition
 * 
 * {{#if enumDescription}}{{enumDescription}}{{else}}Generated enum following powerview-admin patterns{{/if}}
 * Generated by DomainGenerator.
 */

export enum {{enumName}} {
  {{#each enumValues}}
  {{this}} = "{{this}}"{{#unless @last}},{{/unless}}
  {{/each}}
}

// Enum utility functions
export const {{enumName}}Utils = {
  // Get all enum values as array
  getValues: (): {{enumName}}[] => {
    return Object.values({{enumName}});
  },
  
  // Get enum value labels (for i18n)
  getLabel: (value: {{enumName}}): string => {
    switch (value) {
      {{#each enumValues}}
      case {{../enumName}}.{{this}}:
        return 'mentors:{{capitalizeFirst (toLowerCase this)}}';
      {{/each}}
      default:
        return value;
    }
  },
  
  // Check if value is valid
  isValid: (value: string): value is {{enumName}} => {
    return Object.values({{enumName}}).includes(value as {{enumName}});
  },
  
  // Convert string to enum (with validation)
  fromString: (value: string): {{enumName}} | undefined => {
    if ({{enumName}}Utils.isValid(value)) {
      return value as {{enumName}};
    }
    return undefined;
  }
};