import React, { useCallback, useRef, useState } from 'react';
import {
  ArchbaseDataGrid,
  ArchbaseRemoteDataSource,
  ArchbaseFormTemplate,
  ArchbaseNavigationView,
  useArchbaseStore,
  useArchbaseNavigationListener,
  ArchbaseQueryFilter,
  ArchbaseQueryFilterDelegator,
  ArchbaseQueryBuilder,
  ArchbaseDialog,
  ArchbaseNotifications
} from 'archbase-react';
import { Button, Group, ActionIcon, Text, Badge, Code, CopyButton, Tooltip, Stack } from '@mantine/core';
import { IconPlus, IconPencil, IconTrash, IconCopy, IconCheck, IconEye, IconEyeOff, IconRefresh } from '@tabler/icons-react';
import { {{apiTokenClass}} } from '../domain/{{apiTokenClass}}';
import { {{toUpperCase componentName}}_API_TOKENS_ROUTE } from './{{componentName}}Routes';

export interface {{componentName}}ApiTokenManagementViewProps {
  store: any;
  baseURL: string;
  onTokenSelect?: (token: {{apiTokenClass}}) => void;
  onTokenEdit?: (token: {{apiTokenClass}}) => void;
  onTokenDelete?: (token: {{apiTokenClass}}) => void;
  {{#if hasFeature "custom-permissions"}}
  permissions?: {
    canCreateTokens?: boolean;
    canEditTokens?: boolean;
    canDeleteTokens?: boolean;
    canViewTokens?: boolean;
    canViewTokenValues?: boolean;
    canRevokeTokens?: boolean;
  };
  {{/if}}
}

export function {{componentName}}ApiTokenManagementView({ 
  store, 
  baseURL, 
  onTokenSelect, 
  onTokenEdit, 
  onTokenDelete,
  {{#if hasFeature "custom-permissions"}}
  permissions = {
    canCreateTokens: true,
    canEditTokens: true,
    canDeleteTokens: true,
    canViewTokens: true,
    canViewTokenValues: true,
    canRevokeTokens: true
  }
  {{/if}}
}: {{componentName}}ApiTokenManagementViewProps) {
  const [selectedToken, setSelectedToken] = useState<{{apiTokenClass}} | null>(null);
  const [showTokenForm, setShowTokenForm] = useState(false);
  const [showDeleteDialog, setShowDeleteDialog] = useState(false);
  const [showTokenDialog, setShowTokenDialog] = useState(false);
  const [newTokenValue, setNewTokenValue] = useState<string>('');
  const [visibleTokens, setVisibleTokens] = useState<Set<string>>(new Set());
  const queryFilterRef = useRef<ArchbaseQueryFilterDelegator>();
  const dataSourceRef = useRef<ArchbaseRemoteDataSource<{{apiTokenClass}}, string>>();

  useArchbaseNavigationListener({
    navigationId: '{{toLowerCase componentName}}-api-tokens',
    routePath: {{toUpperCase componentName}}_API_TOKENS_ROUTE
  });

  const createDataSource = useCallback(() => {
    const dataSource = new ArchbaseRemoteDataSource<{{apiTokenClass}}, string>({
      url: `${baseURL}/api/v1/api-tokens`,
      name: '{{toLowerCase componentName}}-api-tokens-datasource',
      store
    });
    dataSourceRef.current = dataSource;
    return dataSource;
  }, [baseURL, store]);

  const handleNewToken = useCallback(() => {
    if (dataSourceRef.current) {
      dataSourceRef.current.insert();
      setSelectedToken(null);
      setShowTokenForm(true);
    }
  }, []);

  const handleEditToken = useCallback((token: {{apiTokenClass}}) => {
    if (dataSourceRef.current) {
      dataSourceRef.current.locateByKey(token.id);
      setSelectedToken(token);
      setShowTokenForm(true);
      onTokenEdit?.(token);
    }
  }, [onTokenEdit]);

  const handleDeleteToken = useCallback((token: {{apiTokenClass}}) => {
    setSelectedToken(token);
    setShowDeleteDialog(true);
  }, []);

  const confirmDeleteToken = useCallback(async () => {
    if (selectedToken && dataSourceRef.current) {
      try {
        await dataSourceRef.current.remove();
        ArchbaseNotifications.showSuccess('Token removido com sucesso!');
        onTokenDelete?.(selectedToken);
      } catch (error) {
        ArchbaseNotifications.showError('Erro ao remover token');
      }
    }
    setShowDeleteDialog(false);
    setSelectedToken(null);
  }, [selectedToken, onTokenDelete]);

  const handleTokenSelect = useCallback((token: {{apiTokenClass}}) => {
    setSelectedToken(token);
    onTokenSelect?.(token);
  }, [onTokenSelect]);

  const handleRevokeToken = useCallback(async (token: {{apiTokenClass}}) => {
    if (dataSourceRef.current) {
      try {
        await dataSourceRef.current.request({
          url: `/api/v1/api-tokens/${token.id}/revoke`,
          method: 'POST'
        });
        await dataSourceRef.current.refresh();
        ArchbaseNotifications.showSuccess('Token revogado com sucesso!');
      } catch (error) {
        ArchbaseNotifications.showError('Erro ao revogar token');
      }
    }
  }, []);

  const handleRegenerateToken = useCallback(async (token: {{apiTokenClass}}) => {
    if (dataSourceRef.current) {
      try {
        const response = await dataSourceRef.current.request({
          url: `/api/v1/api-tokens/${token.id}/regenerate`,
          method: 'POST'
        });
        setNewTokenValue(response.data.token);
        setShowTokenDialog(true);
        await dataSourceRef.current.refresh();
        ArchbaseNotifications.showSuccess('Token regenerado com sucesso!');
      } catch (error) {
        ArchbaseNotifications.showError('Erro ao regenerar token');
      }
    }
  }, []);

  const toggleTokenVisibility = useCallback((tokenId: string) => {
    setVisibleTokens(prev => {
      const newSet = new Set(prev);
      if (newSet.has(tokenId)) {
        newSet.delete(tokenId);
      } else {
        newSet.add(tokenId);
      }
      return newSet;
    });
  }, []);

  const handleTokenSave = useCallback(async () => {
    if (dataSourceRef.current) {
      try {
        const response = await dataSourceRef.current.save();
        if (response.data?.token) {
          setNewTokenValue(response.data.token);
          setShowTokenDialog(true);
        }
        setShowTokenForm(false);
        await dataSourceRef.current?.refresh();
      } catch (error) {
        ArchbaseNotifications.showError('Erro ao salvar token');
      }
    }
  }, []);

  const renderTokenActions = useCallback((token: {{apiTokenClass}}) => (
    <Group gap="xs" justify="center">
      {{#if hasFeature "custom-permissions"}}
      {permissions.canViewTokens && (
        <ActionIcon
          variant="light"
          color="blue"
          size="sm"
          onClick={() => handleTokenSelect(token)}
        >
          <IconEye size={16} />
        </ActionIcon>
      )}
      {permissions.canEditTokens && (
        <ActionIcon
          variant="light"
          color="yellow"
          size="sm"
          onClick={() => handleEditToken(token)}
        >
          <IconPencil size={16} />
        </ActionIcon>
      )}
      {permissions.canRevokeTokens && !token.revoked && (
        <ActionIcon
          variant="light"
          color="orange"
          size="sm"
          onClick={() => handleRevokeToken(token)}
        >
          <IconRefresh size={16} />
        </ActionIcon>
      )}
      {permissions.canDeleteTokens && (
        <ActionIcon
          variant="light"
          color="red"
          size="sm"
          onClick={() => handleDeleteToken(token)}
        >
          <IconTrash size={16} />
        </ActionIcon>
      )}
      {{else}}
      <ActionIcon
        variant="light"
        color="blue"
        size="sm"
        onClick={() => handleTokenSelect(token)}
      >
        <IconEye size={16} />
      </ActionIcon>
      <ActionIcon
        variant="light"
        color="yellow"
        size="sm"
        onClick={() => handleEditToken(token)}
      >
        <IconPencil size={16} />
      </ActionIcon>
      {!token.revoked && (
        <ActionIcon
          variant="light"
          color="orange"
          size="sm"
          onClick={() => handleRevokeToken(token)}
        >
          <IconRefresh size={16} />
        </ActionIcon>
      )}
      <ActionIcon
        variant="light"
        color="red"
        size="sm"
        onClick={() => handleDeleteToken(token)}
      >
        <IconTrash size={16} />
      </ActionIcon>
      {{/if}}
    </Group>
  ), [handleTokenSelect, handleEditToken, handleDeleteToken, handleRevokeToken{{#if hasFeature "custom-permissions"}}, permissions{{/if}}]);

  const renderTokenValue = useCallback((token: {{apiTokenClass}}) => {
    if (!token.token) return <Text size="sm" c="dimmed">Token não disponível</Text>;
    
    const isVisible = visibleTokens.has(token.id);
    const displayValue = isVisible ? token.token : '•'.repeat(Math.min(token.token.length, 32));
    
    return (
      <Group gap="xs" style={{ maxWidth: 200 }}>
        <Code 
          style={{ 
            maxWidth: 150, 
            overflow: 'hidden', 
            textOverflow: 'ellipsis',
            whiteSpace: 'nowrap'
          }}
        >
          {displayValue}
        </Code>
        {{#if hasFeature "custom-permissions"}}
        {permissions.canViewTokenValues && (
          <ActionIcon
            variant="light"
            size="xs"
            onClick={() => toggleTokenVisibility(token.id)}
          >
            {isVisible ? <IconEyeOff size={12} /> : <IconEye size={12} />}
          </ActionIcon>
        )}
        {{else}}
        <ActionIcon
          variant="light"
          size="xs"
          onClick={() => toggleTokenVisibility(token.id)}
        >
          {isVisible ? <IconEyeOff size={12} /> : <IconEye size={12} />}
        </ActionIcon>
        {{/if}}
        {isVisible && (
          <CopyButton value={token.token}>
            {({ copied, copy }) => (
              <ActionIcon
                variant="light"
                size="xs"
                onClick={copy}
                color={copied ? 'green' : 'blue'}
              >
                {copied ? <IconCheck size={12} /> : <IconCopy size={12} />}
              </ActionIcon>
            )}
          </CopyButton>
        )}
      </Group>
    );
  }, [visibleTokens, toggleTokenVisibility{{#if hasFeature "custom-permissions"}}, permissions{{/if}}]);

  const renderTokenStatus = useCallback((token: {{apiTokenClass}}) => {
    if (token.revoked) {
      return <Badge color="red" variant="light" size="sm">Revogado</Badge>;
    }
    
    if (token.expiresAt && new Date(token.expiresAt) < new Date()) {
      return <Badge color="orange" variant="light" size="sm">Expirado</Badge>;
    }
    
    return <Badge color="green" variant="light" size="sm">Ativo</Badge>;
  }, []);

  const renderTokenScopes = useCallback((token: {{apiTokenClass}}) => (
    <Group gap="xs">
      {token.scopes?.slice(0, 2).map((scope, index) => (
        <Badge key={index} variant="outline" size="xs">
          {scope}
        </Badge>
      ))}
      {token.scopes && token.scopes.length > 2 && (
        <Badge variant="outline" size="xs" color="gray">
          +{token.scopes.length - 2}
        </Badge>
      )}
    </Group>
  ), []);

  return (
    <ArchbaseNavigationView
      navigationId="{{toLowerCase componentName}}-api-tokens"
      dataSource={createDataSource()}
      queryFilterRef={queryFilterRef}
    >
      <ArchbaseQueryFilter
        ref={queryFilterRef}
        dataSource={dataSourceRef.current}
        initialFilter={ArchbaseQueryBuilder.create().build()}
        {{#if hasFeature "advanced-filters"}}
        advancedMode
        {{/if}}
      >
        <Group justify="space-between" mb="md">
          <Text size="lg" fw={600}>
            Gerenciamento de API Tokens
          </Text>
          {{#if hasFeature "custom-permissions"}}
          {permissions.canCreateTokens && (
            <Button
              leftSection={<IconPlus size={16} />}
              onClick={handleNewToken}
              variant="filled"
            >
              Novo Token
            </Button>
          )}
          {{else}}
          <Button
            leftSection={<IconPlus size={16} />}
            onClick={handleNewToken}
            variant="filled"
          >
            Novo Token
          </Button>
          {{/if}}
        </Group>

        <ArchbaseDataGrid
          dataSource={dataSourceRef.current}
          columns={[
            {
              headerName: 'Nome',
              field: 'name',
              sortable: true,
              filter: true,
              flex: 1
            },
            {
              headerName: 'Token',
              field: 'token',
              sortable: false,
              filter: false,
              width: 250,
              cellRenderer: renderTokenValue
            },
            {
              headerName: 'Escopos',
              field: 'scopes',
              sortable: false,
              filter: false,
              width: 200,
              cellRenderer: renderTokenScopes
            },
            {
              headerName: 'Status',
              field: 'status',
              sortable: true,
              filter: true,
              width: 100,
              cellRenderer: renderTokenStatus
            },
            {
              headerName: 'Criado em',
              field: 'createdAt',
              sortable: true,
              filter: true,
              width: 150,
              cellRenderer: (token: {{apiTokenClass}}) => 
                new Date(token.createdAt).toLocaleDateString('pt-BR')
            },
            {
              headerName: 'Expira em',
              field: 'expiresAt',
              sortable: true,
              filter: true,
              width: 150,
              cellRenderer: (token: {{apiTokenClass}}) => 
                token.expiresAt 
                  ? new Date(token.expiresAt).toLocaleDateString('pt-BR')
                  : 'Nunca'
            },
            {
              headerName: 'Ações',
              field: 'actions',
              sortable: false,
              filter: false,
              width: 150,
              cellRenderer: renderTokenActions
            }
          ]}
          {{#if hasFeature "pagination"}}
          enablePagination
          paginationPageSize={25}
          {{/if}}
          {{#if hasFeature "export"}}
          enableExport
          {{/if}}
          {{#if hasFeature "selection"}}
          enableSelection
          {{/if}}
          height="calc(100vh - 200px)"
        />
      </ArchbaseQueryFilter>

      {showTokenForm && (
        <ArchbaseDialog
          title={selectedToken ? 'Editar Token' : 'Novo Token'}
          opened={showTokenForm}
          onClose={() => setShowTokenForm(false)}
          size="lg"
        >
          <ArchbaseFormTemplate
            dataSource={dataSourceRef.current}
            onSave={handleTokenSave}
            onCancel={() => setShowTokenForm(false)}
            fields={[
              {
                name: 'name',
                label: 'Nome do Token',
                type: 'text',
                required: true,
                validation: {
                  required: 'Nome é obrigatório'
                }
              },
              {
                name: 'description',
                label: 'Descrição',
                type: 'textarea',
                required: false
              },
              {
                name: 'scopes',
                label: 'Escopos',
                type: 'multiselect',
                required: true,
                options: [
                  { value: 'read', label: 'Leitura' },
                  { value: 'write', label: 'Escrita' },
                  { value: 'delete', label: 'Exclusão' },
                  { value: 'admin', label: 'Administração' }
                ],
                validation: {
                  required: 'Pelo menos um escopo é obrigatório'
                }
              },
              {
                name: 'expiresAt',
                label: 'Data de Expiração',
                type: 'date',
                required: false
              }
            ]}
          />
        </ArchbaseDialog>
      )}

      {showTokenDialog && newTokenValue && (
        <ArchbaseDialog
          title="Token Criado"
          opened={showTokenDialog}
          onClose={() => {
            setShowTokenDialog(false);
            setNewTokenValue('');
          }}
          size="md"
        >
          <Stack>
            <Text size="sm" c="dimmed">
              Seu token foi criado com sucesso. Copie e guarde em um local seguro, 
              pois não será possível visualizá-lo novamente.
            </Text>
            <Group>
              <Code style={{ flex: 1, wordBreak: 'break-all' }}>
                {newTokenValue}
              </Code>
              <CopyButton value={newTokenValue}>
                {({ copied, copy }) => (
                  <Tooltip label={copied ? 'Copiado!' : 'Copiar'}>
                    <ActionIcon
                      variant="light"
                      onClick={copy}
                      color={copied ? 'green' : 'blue'}
                    >
                      {copied ? <IconCheck size={16} /> : <IconCopy size={16} />}
                    </ActionIcon>
                  </Tooltip>
                )}
              </CopyButton>
            </Group>
            <Button
              fullWidth
              onClick={() => {
                setShowTokenDialog(false);
                setNewTokenValue('');
              }}
            >
              Fechar
            </Button>
          </Stack>
        </ArchbaseDialog>
      )}

      {showDeleteDialog && selectedToken && (
        <ArchbaseDialog
          title="Confirmar Exclusão"
          opened={showDeleteDialog}
          onClose={() => setShowDeleteDialog(false)}
          size="sm"
        >
          <Text mb="md">
            Tem certeza que deseja remover o token <strong>{selectedToken.name}</strong>?
          </Text>
          <Group justify="flex-end">
            <Button
              variant="light"
              onClick={() => setShowDeleteDialog(false)}
            >
              Cancelar
            </Button>
            <Button
              color="red"
              onClick={confirmDeleteToken}
            >
              Confirmar
            </Button>
          </Group>
        </ArchbaseDialog>
      )}
    </ArchbaseNavigationView>
  );
}