import React from 'react';
import { NavLink, Group, Text } from '@mantine/core';
import { 
  IconShield, 
  IconUsers, 
  IconKey, 
  IconUserCheck, 
  IconSettings,
  IconEye,
  IconLock
} from '@tabler/icons-react';
import { useNavigate, useLocation } from 'react-router-dom';
import { 
  {{toUpperCase componentName}}_ROUTE,
  {{toUpperCase componentName}}_USERS_ROUTE,
  {{toUpperCase componentName}}_API_TOKENS_ROUTE
} from './{{componentName}}Routes';

export interface {{componentName}}NavigationProps {
  {{#if hasFeature "custom-permissions"}}
  permissions?: {
    canAccessSecurity?: boolean;
    canManageUsers?: boolean;
    canManageApiTokens?: boolean;
    canViewAuditLog?: boolean;
    canManageRoles?: boolean;
    canManagePermissions?: boolean;
  };
  {{/if}}
  onNavigate?: (path: string) => void;
}

export function {{componentName}}Navigation({ 
  {{#if hasFeature "custom-permissions"}}
  permissions = {
    canAccessSecurity: true,
    canManageUsers: true,
    canManageApiTokens: true,
    canViewAuditLog: true,
    canManageRoles: true,
    canManagePermissions: true
  },
  {{/if}}
  onNavigate 
}: {{componentName}}NavigationProps) {
  const navigate = useNavigate();
  const location = useLocation();

  const handleNavigation = (path: string) => {
    navigate(path);
    onNavigate?.(path);
  };

  const navigationItems = [
    {{#if hasFeature "custom-permissions"}}
    ...(permissions.canAccessSecurity ? [{
      label: 'Visão Geral',
      icon: IconShield,
      path: {{toUpperCase componentName}}_ROUTE,
      description: 'Visão geral da segurança do sistema'
    }] : []),
    ...(permissions.canManageUsers ? [{
      label: 'Usuários',
      icon: IconUsers,
      path: {{toUpperCase componentName}}_USERS_ROUTE,
      description: 'Gerenciar usuários do sistema'
    }] : []),
    ...(permissions.canManageApiTokens ? [{
      label: 'API Tokens',
      icon: IconKey,
      path: {{toUpperCase componentName}}_API_TOKENS_ROUTE,
      description: 'Gerenciar tokens de API'
    }] : []),
    ...(permissions.canManageRoles ? [{
      label: 'Roles',
      icon: IconUserCheck,
      path: `${{{toUpperCase componentName}}_ROUTE}/roles`,
      description: 'Gerenciar roles do sistema'
    }] : []),
    ...(permissions.canManagePermissions ? [{
      label: 'Permissões',
      icon: IconLock,
      path: `${{{toUpperCase componentName}}_ROUTE}/permissions`,
      description: 'Gerenciar permissões do sistema'
    }] : []),
    ...(permissions.canViewAuditLog ? [{
      label: 'Log de Auditoria',
      icon: IconEye,
      path: `${{{toUpperCase componentName}}_ROUTE}/audit-log`,
      description: 'Visualizar log de auditoria'
    }] : [])
    {{else}}
    {
      label: 'Visão Geral',
      icon: IconShield,
      path: {{toUpperCase componentName}}_ROUTE,
      description: 'Visão geral da segurança do sistema'
    },
    {
      label: 'Usuários',
      icon: IconUsers,
      path: {{toUpperCase componentName}}_USERS_ROUTE,
      description: 'Gerenciar usuários do sistema'
    },
    {
      label: 'API Tokens',
      icon: IconKey,
      path: {{toUpperCase componentName}}_API_TOKENS_ROUTE,
      description: 'Gerenciar tokens de API'
    },
    {{#if hasFeature "roles-management"}}
    {
      label: 'Roles',
      icon: IconUserCheck,
      path: `${{{toUpperCase componentName}}_ROUTE}/roles`,
      description: 'Gerenciar roles do sistema'
    },
    {{/if}}
    {{#if hasFeature "permissions-management"}}
    {
      label: 'Permissões',
      icon: IconLock,
      path: `${{{toUpperCase componentName}}_ROUTE}/permissions`,
      description: 'Gerenciar permissões do sistema'
    },
    {{/if}}
    {{#if hasFeature "audit-log"}}
    {
      label: 'Log de Auditoria',
      icon: IconEye,
      path: `${{{toUpperCase componentName}}_ROUTE}/audit-log`,
      description: 'Visualizar log de auditoria'
    }
    {{/if}}
    {{/if}}
  ];

  return (
    <div>
      <Group mb="md" px="md" py="sm">
        <IconSettings size={20} />
        <Text size="lg" fw={600}>
          Segurança
        </Text>
      </Group>
      
      {navigationItems.map((item) => (
        <NavLink
          key={item.path}
          href={item.path}
          label={item.label}
          description={item.description}
          leftSection={<item.icon size="1rem" />}
          active={location.pathname === item.path}
          onClick={(event) => {
            event.preventDefault();
            handleNavigation(item.path);
          }}
          style={{
            borderRadius: 4,
            margin: '2px 8px'
          }}
        />
      ))}
    </div>
  );
}