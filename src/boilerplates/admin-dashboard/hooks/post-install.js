/**
 * Post-install hook for admin-dashboard boilerplate
 * Runs after project files are generated
 */

const fs = require('fs-extra');
const path = require('path');

module.exports = async function postInstall(context) {
  const { projectName, answers, outputPath } = context;
  
  console.log('üîß Running post-install setup...');
  
  try {
    // Create .env file
    await createEnvFile(outputPath, answers);
    
    // Create additional directories if needed
    await createDirectories(outputPath, answers);
    
    // Generate additional files based on selected features
    await generateFeatureFiles(outputPath, answers);
    
    console.log('‚úÖ Post-install setup completed successfully!');
    
  } catch (error) {
    console.error('‚ùå Post-install setup failed:', error.message);
    throw error;
  }
};

async function createEnvFile(outputPath, answers) {
  const envContent = `# Environment Configuration
# Generated by Archbase CLI

# Application
VITE_APP_NAME="${answers.projectName}"
VITE_APP_VERSION=0.1.0

# API Configuration
VITE_API_URL=${answers.apiUrl || 'http://localhost:3001/api'}
VITE_API_TIMEOUT=30000

# Database Configuration
DATABASE_TYPE=${answers.database || 'postgresql'}

# Authentication
VITE_AUTH_ENABLED=${answers.features.includes('authentication') ? 'true' : 'false'}
VITE_JWT_SECRET=your-secret-key-here

# Features
VITE_ENABLE_REPORTS=${answers.features.includes('reports') ? 'true' : 'false'}
VITE_ENABLE_NOTIFICATIONS=${answers.features.includes('notifications') ? 'true' : 'false'}

# Development
NODE_ENV=development
VITE_DEBUG=true
`;

  await fs.writeFile(path.join(outputPath, '.env'), envContent);
  await fs.writeFile(path.join(outputPath, '.env.example'), envContent);
}

async function createDirectories(outputPath, answers) {
  const directories = [
    'src/assets/images',
    'src/assets/icons',
    'public/uploads',
    'tests/unit',
    'tests/integration'
  ];

  if (answers.features.includes('reports')) {
    directories.push('src/reports/templates');
  }

  if (answers.features.includes('notifications')) {
    directories.push('src/notifications/templates');
  }

  for (const dir of directories) {
    await fs.ensureDir(path.join(outputPath, dir));
  }
}

async function generateFeatureFiles(outputPath, answers) {
  // Generate feature-specific configuration files
  
  if (answers.features.includes('notifications')) {
    const notificationConfig = {
      providers: {
        email: {
          enabled: true,
          service: 'smtp'
        },
        push: {
          enabled: true,
          service: 'firebase'
        }
      },
      templates: {}
    };
    
    await fs.writeJson(
      path.join(outputPath, 'src/config/notifications.json'), 
      notificationConfig, 
      { spaces: 2 }
    );
  }

  if (answers.features.includes('reports')) {
    const reportsConfig = {
      formats: ['pdf', 'excel', 'csv'],
      templates: [],
      scheduling: {
        enabled: true,
        timezone: 'America/Sao_Paulo'
      }
    };
    
    await fs.writeJson(
      path.join(outputPath, 'src/config/reports.json'), 
      reportsConfig, 
      { spaces: 2 }
    );
  }
}