{{#each imports}}
{{{this}}}
{{/each}}

{{#if typescript}}
{{{interfaces}}}

interface {{componentName}}Props {
  data: {{entityName}}[];
  onAdd?: (item: {{entityName}}) => void;
  onEdit?: (item: {{entityName}}) => void;
  onDelete?: (id: string | number) => void;
}
{{/if}}

const {{componentName}}{{#if typescript}}: React.FC<{{componentName}}Props>{{/if}} = ({
  data,
  onAdd,
  onEdit,
  onDelete
}) => {
  const [showForm, setShowForm] = {{#if typescript}}useState<boolean>{{else}}useState{{/if}}(false);
  const [selectedItem, setSelectedItem] = {{#if typescript}}useState<{{entityName}} | null>{{else}}useState{{/if}}(null);

  const columns = [
    {{#each fields}}
    {
      key: '{{name}}',
      title: '{{label}}',
      dataIndex: '{{name}}',
      {{#if sortable}}sorter: true,{{/if}}
      {{#if filterable}}filterable: true,{{/if}}
    },
    {{/each}}
    {
      key: 'actions',
      title: 'Ações',
      render: (record{{#if typescript}}: {{entityName}}{{/if}}) => (
        <div className="action-buttons">
          <button 
            className="btn-edit"
            onClick={() => handleEdit(record)}
          >
            Editar
          </button>
          <button 
            className="btn-delete"
            onClick={() => handleDelete(record.id)}
          >
            Excluir
          </button>
        </div>
      )
    }
  ];

  const handleAdd = () => {
    setSelectedItem(null);
    setShowForm(true);
  };

  const handleEdit = (item{{#if typescript}}: {{entityName}}{{/if}}) => {
    setSelectedItem(item);
    setShowForm(true);
    onEdit?.(item);
  };

  const handleDelete = (id{{#if typescript}}: string | number{{/if}}) => {
    if (confirm('Tem certeza que deseja excluir este item?')) {
      onDelete?.(id);
    }
  };

  const handleSubmit = (values{{#if typescript}}: {{entityName}}{{/if}}) => {
    if (selectedItem) {
      onEdit?.({ ...selectedItem, ...values });
    } else {
      onAdd?.(values);
    }
    setShowForm(false);
  };

  return (
    <div className="{{componentName}}">
      <div className="{{componentName}}__header">
        <h1>{{entityName}} - CRUD</h1>
        <button 
          className="btn-primary"
          onClick={handleAdd}
        >
          Adicionar {{entityName}}
        </button>
      </div>
      
      {{#if withFilters}}
      <ArchbaseFilterBuilder
        onFilterChange={(filters) => console.log('Filters:', filters)}
      />
      {{/if}}
      
      <ArchbaseDataTable
        columns={columns}
        dataSource={data}
        {{#if withPagination}}
        pagination={{
          pageSize: 10,
          showSizeChanger: true
        }}
        {{/if}}
        {{#if withSorting}}sortable{{/if}}
      />

      <ArchbaseDialog
        open={showForm}
        onClose={() => setShowForm(false)}
        title={selectedItem ? `Editar ${entityName}` : `Adicionar ${entityName}`}
      >
        <FormBuilder
          fields={[
            {{#each fields}}
            {
              name: '{{name}}',
              label: '{{label}}',
              type: '{{type}}',
              {{#if required}}required: true,{{/if}}
            },
            {{/each}}
          ]}
          initialValues={selectedItem || {}}
          onSubmit={handleSubmit}
        />
      </ArchbaseDialog>
    </div>
  );
};

export default {{componentName}};