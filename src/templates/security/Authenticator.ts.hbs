import { AxiosRequestConfig } from 'axios';
import { injectable } from 'inversify';
import {
  ArchbaseAccessToken,
  ArchbaseAuthenticator,
  ArchbaseRemoteApiDataSource,
  ArchbaseUser
} from 'archbase-react';
import { {{userClass}} } from './{{userClass}}';

export interface {{authenticatorClass}}Config {
  baseURL: string;
  loginEndpoint?: string;
  refreshEndpoint?: string;
  userInfoEndpoint?: string;
  {{#if password-reset}}
  passwordResetEndpoint?: string;
  {{/if}}
}

@injectable()
export class {{authenticatorClass}} implements ArchbaseAuthenticator {
  private config: {{authenticatorClass}}Config;
  private apiClient: ArchbaseRemoteApiDataSource<any, any>;

  constructor(config: {{authenticatorClass}}Config) {
    this.config = {
      loginEndpoint: '/api/v1/auth/authenticate',
      refreshEndpoint: '/api/v1/auth/refresh-token',
      userInfoEndpoint: '/api/v1/auth/user-info',
      {{#if password-reset}}
      passwordResetEndpoint: '/api/v1/auth/reset-password',
      {{/if}}
      ...config
    };

    this.apiClient = new ArchbaseRemoteApiDataSource<any, any>({
      url: this.config.baseURL,
      name: '{{toLowerCase authenticatorClass}}-api'
    });
  }

  async login(username: string, password: string): Promise<ArchbaseAccessToken> {
    try {
      const requestConfig: AxiosRequestConfig = {
        url: this.config.loginEndpoint,
        method: 'POST',
        data: {
          username,
          password
        }
      };

      const response = await this.apiClient.request(requestConfig);
      
      if (response.data) {
        return {
          access_token: response.data.access_token,
          refresh_token: response.data.refresh_token,
          token_type: response.data.token_type || 'Bearer',
          expires_in: response.data.expires_in,
          scope: response.data.scope
        };
      }
      
      throw new Error('Invalid response from authentication server');
    } catch (error) {
      console.error('Login error:', error);
      throw new Error('Falha na autenticação. Verifique suas credenciais.');
    }
  }

  async refreshToken(refresh_token: string): Promise<ArchbaseAccessToken> {
    try {
      const requestConfig: AxiosRequestConfig = {
        url: this.config.refreshEndpoint,
        method: 'POST',
        data: {
          refresh_token
        }
      };

      const response = await this.apiClient.request(requestConfig);
      
      if (response.data) {
        return {
          access_token: response.data.access_token,
          refresh_token: response.data.refresh_token,
          token_type: response.data.token_type || 'Bearer',
          expires_in: response.data.expires_in,
          scope: response.data.scope
        };
      }
      
      throw new Error('Invalid response from token refresh');
    } catch (error) {
      console.error('Token refresh error:', error);
      throw new Error('Falha ao renovar token de acesso.');
    }
  }

  async getUserInfo(accessToken: string): Promise<ArchbaseUser> {
    try {
      const requestConfig: AxiosRequestConfig = {
        url: this.config.userInfoEndpoint,
        method: 'GET',
        headers: {
          'Authorization': `Bearer ${accessToken}`
        }
      };

      const response = await this.apiClient.request(requestConfig);
      
      if (response.data) {
        return new {{userClass}}(
          response.data.id,
          response.data.username,
          response.data.email,
          response.data.name,
          response.data.avatar,
          response.data.roles || [],
          response.data.permissions || []
        );
      }
      
      throw new Error('Invalid user info response');
    } catch (error) {
      console.error('Get user info error:', error);
      throw new Error('Falha ao obter informações do usuário.');
    }
  }

  {{#if password-reset}}
  async resetPassword(email: string): Promise<void> {
    try {
      const requestConfig: AxiosRequestConfig = {
        url: this.config.passwordResetEndpoint,
        method: 'POST',
        data: {
          email
        }
      };

      await this.apiClient.request(requestConfig);
    } catch (error) {
      console.error('Password reset error:', error);
      throw new Error('Falha ao solicitar redefinição de senha.');
    }
  }

  async confirmPasswordReset(token: string, newPassword: string): Promise<void> {
    try {
      const requestConfig: AxiosRequestConfig = {
        url: `${this.config.passwordResetEndpoint}/confirm`,
        method: 'POST',
        data: {
          token,
          newPassword
        }
      };

      await this.apiClient.request(requestConfig);
    } catch (error) {
      console.error('Password reset confirmation error:', error);
      throw new Error('Falha ao confirmar redefinição de senha.');
    }
  }
  {{/if}}

  {{#if logout}}
  async logout(accessToken: string): Promise<void> {
    try {
      const requestConfig: AxiosRequestConfig = {
        url: '/api/v1/auth/logout',
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${accessToken}`
        }
      };

      await this.apiClient.request(requestConfig);
    } catch (error) {
      console.error('Logout error:', error);
      // Don't throw error for logout, just log it
    }
  }
  {{/if}}

  {{#if change-password}}
  async changePassword(
    accessToken: string,
    currentPassword: string,
    newPassword: string
  ): Promise<void> {
    try {
      const requestConfig: AxiosRequestConfig = {
        url: '/api/v1/auth/change-password',
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${accessToken}`
        },
        data: {
          currentPassword,
          newPassword
        }
      };

      await this.apiClient.request(requestConfig);
    } catch (error) {
      console.error('Change password error:', error);
      throw new Error('Falha ao alterar senha.');
    }
  }
  {{/if}}
}