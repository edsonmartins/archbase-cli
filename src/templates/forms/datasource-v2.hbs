import React, { useCallback } from 'react';
{{#if useValidation}}
import * as {{validationLibrary}} from '{{validationLibrary}}';
{{/if}}
import { 
  ArchbaseFormTemplate,
  ArchbaseEdit,
  ArchbaseSelect,
  ArchbaseSelectItem,
  ArchbaseCheckbox,
  ArchbaseNumberEdit,
  ArchbasePasswordEdit,
  ArchbaseTextArea,
  useArchbaseRemoteDataSource,
  useArchbaseDataSource
} from 'archbase-react';
import { useNavigate, useSearchParams } from 'react-router-dom';
{{#if typescript}}
import { {{entityName}}Dto } from '../domain/{{entityName}}Dto';
import { {{entityName}}RemoteService } from '../service/{{entityName}}RemoteService';
{{/if}}

{{#if typescript}}
interface {{componentName}}Props {
  {{entityName}}Id?: string;
}
{{/if}}

// Navigation constants (following powerview-admin pattern)
const {{feature}}_ROUTE = '{{adminRoute}}';
const {{feature}}_FORM_ROUTE = '{{adminRoute}}/:{{toLowerCase entityName}}Id';

{{#if useValidation}}
const validator = {{validationLibrary}}.object({
  {{#each fields}}
  {{name}}: {{#if (eq type 'email')}}{{../validationLibrary}}.string().email(){{else if (eq type 'number')}}{{../validationLibrary}}.number(){{else if (eq type 'array')}}{{../validationLibrary}}.array(){{else}}{{../validationLibrary}}.string(){{/if}}{{#if required}}.required(){{/if}},
  {{/each}}
});
{{/if}}

export function {{componentName}}({{#if typescript}}{ {{entityName}}Id }: {{componentName}}Props{{/if}}) {
  const navigate = useNavigate();
  const [searchParams] = useSearchParams();
  
  // Admin navigation pattern: action parameter determines form mode
  const action = searchParams.get('action') || 'ADD';
  const isViewMode = action === 'VIEW';
  const isEditMode = action === 'EDIT';
  
  // Remote DataSource for main entity
  const { dataSource, isLoading, error } = useArchbaseRemoteDataSource<{{entityName}}Dto, string>({
    name: 'ds{{entityName}}',
    label: '{{entityName}}',
    service: {{entityName}}RemoteService, // Inject via IOC
    pageSize: 50,
    loadOnStart: true,
    {{#if useValidation}}
    validator,
    {{/if}}
    id: isEditMode || isViewMode ? {{entityName}}Id : undefined,
    onLoadComplete: (dataSource) => {
      if (action === 'ADD') {
        dataSource.append({{entityName}}Dto.newInstance());
      }
    }
  });


  const handleBeforeSave = useCallback(async (entity: {{entityName}}Dto) => {
    // Custom validation or business logic before save
    return true;
  }, []);

  const handleAfterSave = useCallback((entity: {{entityName}}Dto) => {
    // Navigate back to list view using admin route pattern
    navigate({{feature}}_ROUTE);
  }, [navigate]);

  const handleCancel = useCallback(() => {
    navigate({{feature}}_ROUTE);
  }, [navigate]);

  if (isLoading) {
    return <div>Carregando...</div>;
  }

  if (error) {
    return <div>Erro ao carregar dados: {error.message}</div>;
  }

  return (
    <ArchbaseFormTemplate
      title={`${isEditMode ? 'Editar' : isViewMode ? 'Visualizar' : 'Novo'} {{entityName}}`}
      dataSource={dataSource}
      onBeforeSave={handleBeforeSave}
      onAfterSave={handleAfterSave}
      onCancel={handleCancel}
      readOnly={isViewMode}
    >
      {{#each fields}}
      {{#if (eq type 'text')}}
      <ArchbaseEdit
        label="{{label}}"
        dataSource={dataSource}
        dataField="{{name}}"
        {{#if required}}required{{/if}}
        {{#if placeholder}}placeholder="{{placeholder}}"{{/if}}
      />
      {{else if (eq type 'email')}}
      <ArchbaseEdit
        label="{{label}}"
        dataSource={dataSource}
        dataField="{{name}}"
        type="email"
        {{#if required}}required{{/if}}
        {{#if placeholder}}placeholder="{{placeholder}}"{{/if}}
      />
      {{else if (eq type 'password')}}
      <ArchbasePasswordEdit
        label="{{label}}"
        dataSource={dataSource}
        dataField="{{name}}"
        {{#if required}}required{{/if}}
        {{#if placeholder}}placeholder="{{placeholder}}"{{/if}}
      />
      {{else if (eq type 'number')}}
      <ArchbaseNumberEdit
        label="{{label}}"
        dataSource={dataSource}
        dataField="{{name}}"
        {{#if required}}required{{/if}}
        {{#if placeholder}}placeholder="{{placeholder}}"{{/if}}
      />
      {{else if (eq type 'textarea')}}
      <ArchbaseTextArea
        label="{{label}}"
        dataSource={dataSource}
        dataField="{{name}}"
        {{#if required}}required{{/if}}
        {{#if placeholder}}placeholder="{{placeholder}}"{{/if}}
      />
      {{else if (eq type 'boolean')}}
      <ArchbaseCheckbox
        label="{{label}}"
        dataSource={dataSource}
        dataField="{{name}}"
      />
      {{else if (eq type 'select')}}
      <ArchbaseSelect
        label="{{label}}"
        dataSource={dataSource}
        dataField="{{name}}"
        {{#if required}}required{{/if}}
      >
        {{#each options}}
        <ArchbaseSelectItem value="{{this}}" label="{{this}}" />
        {{/each}}
      </ArchbaseSelect>
      {{else if (eq type 'array')}}
      <ArchbaseTextArea
        label="{{label}} (Array - separado por linha)"
        dataSource={dataSource}
        dataField="{{name}}"
        {{#if required}}required{{/if}}
        placeholder="Um item por linha"
        rows={4}
      />
      {{else}}
      <ArchbaseEdit
        label="{{label}}"
        dataSource={dataSource}
        dataField="{{name}}"
        {{#if required}}required{{/if}}
        {{#if placeholder}}placeholder="{{placeholder}}"{{/if}}
      />
      {{/if}}
      {{/each}}
    </ArchbaseFormTemplate>
  );
}

export { {{componentName}} };
export default {{componentName}};