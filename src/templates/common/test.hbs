import { render, screen } from '@testing-library/react';
import {{componentName}} from './{{componentName}}';

describe('{{componentName}}', () => {
  {{#if props}}
  const defaultProps = {
    {{#each props}}
    {{name}}: {{#if defaultValue}}{{defaultValue}}{{else}}{{#if (eq type "string")}}'test {{name}}'{{else}}{{#if (eq type "number")}}123{{else}}{{#if (eq type "boolean")}}true{{else}}null{{/if}}{{/if}}{{/if}}{{/if}},
    {{/each}}
  };
  {{/if}}

  it('renders without crashing', () => {
    render(<{{componentName}} {{#if props}}{...defaultProps}{{/if}} />);
    {{#if (eq testType "page")}}
    expect(screen.getByText('{{pageTitle}}')).toBeInTheDocument();
    {{else}}
    const element = screen.getByText(/{{componentName}}/i);
    expect(element).toBeInTheDocument();
    {{/if}}
  });

  {{#if props}}
  {{#each props}}
  it('renders with {{name}} prop', () => {
    const testValue = {{#if (eq type "string")}}'custom {{name}}'{{else}}{{#if (eq type "number")}}999{{else}}{{#if (eq type "boolean")}}false{{else}}'test'{{/if}}{{/if}}{{/if}};
    render(<{{../componentName}} {...defaultProps} {{name}}={testValue} />);
    // Add specific assertions based on prop type
  });
  {{/each}}
  {{/if}}

  {{#if withState}}
  it('manages state correctly', () => {
    render(<{{componentName}} {{#if props}}{...defaultProps}{{/if}} />);
    // Test state management
  });
  {{/if}}

  {{#if withAuth}}
  it('requires authentication', () => {
    render(<{{componentName}} {{#if props}}{...defaultProps}{{/if}} />);
    // Test authentication requirement
  });
  {{/if}}
});