{{#each imports}}
{{{this}}}
{{/each}}

{{#if typescript}}
{{{interfaces}}}
{{/if}}

const {{componentName}}{{#if typescript}}: React.FC<{{componentName}}Props>{{/if}} = ({
  {{#each props}}
  {{name}}{{#if defaultValue}} = {{defaultValue}}{{/if}},
  {{/each}}
}) => {
  {{#if withState}}
  {{#each hooks}}
  {{#if (eq type "state")}}
  const [{{name}}, set{{../componentName}}{{name}}] = useState{{#if typescript}}<string>{{/if}}('');
  {{/if}}
  {{/each}}
  {{/if}}
  
  {{#if withEffects}}
  {{#each hooks}}
  {{#if (eq type "effect")}}
  useEffect(() => {
    // Effect logic for {{name}}
    console.log('{{componentName}} mounted');
    
    return () => {
      console.log('{{componentName}} unmounted');
    };
  }, []);
  {{/if}}
  {{/each}}
  {{/if}}
  
  return (
    <ArchbaseCard className="{{componentName}}">
      <div className="{{componentName}}__content">
        {{#each props}}
        {{#if (eq type "string")}}
        <div className="{{../componentName}}__field">
          <label>{{label}}:</label>
          <ArchbaseText>{{{name}}}</ArchbaseText>
        </div>
        {{/if}}
        {{#if (eq type "boolean")}}
        <div className="{{../componentName}}__field">
          <label>{{label}}:</label>
          <span className={`status ${{{name}} ? 'active' : 'inactive'}`}>
            {{{name}} ? 'Ativo' : 'Inativo'}
          </span>
        </div>
        {{/if}}
        {{#if (eq type "node")}}
        <div className="{{../componentName}}__custom">
          {{{name}}}
        </div>
        {{/if}}
        {{/each}}
      </div>
    </ArchbaseCard>
  );
};

{{#if typescript}}
{{componentName}}.defaultProps = {{defaultProps}};
{{/if}}

export default {{componentName}};